in sync we dont need any callback but in async we need callback

write  will override the content present in the file while append will not

cpSync => to copy file
unlink => to delete a file
mkdirSync => create directory paramter recursive is used to make recursive directories
exists => check if file is present or not
truncate => it will kept first n bytes of characters
rename => rename file
stat => to tell about the stat
watch => tells about the changes in file

fd => file descriptor => used in fs.open => It acts as an index or reference to the file's location in the operating system's internal file table.
0 – Standard Input (stdin)
1 – Standard Output (stdout)
2 – Standard Error (stderr)
>= 3 - file is open


'r'	    Open the file for reading. An error occurs if the file does not exist.
'r+'	Open the file for reading and writing. An error occurs if the file doesn't exist.
'w'	    Open the file for writing. If it does not exist, it is created. If it exists, it's truncated.
'w+'	Open the file for reading and writing. If it does not exist, it's created. If it exists, it's truncated.
'a'	    Open the file for appending. If it does not exist, it is created.
'a+'	Open the file for reading and appending. If it doesn't exist, it's created.



let stream = fs.createReadStream("fsnotes.txt");
stream.on("data", (chunk) => {
  console.log(chunk.toString());
});




// stream.on("end", () => {
//   res.end();
// });
//});



//fs.stat("fsnotes.txt",(err,stats) => {
// if (err) console.log(err);
// else console.log(stats);
//})




//fs.watch("fsnotes.txt",(err,stats) => {
// if (err) console.log(err);
// else console.log(stats);
//})




// fs.truncateSync("text.html",3);




// fs.open(`${import.meta.filename}`, "r", (err, fd) => {
//   console.log(import.meta.filename);
//   let size = 0;
//   fs.stat(`${import.meta.filename}`, (err, stat) => {
//     size = stat.size;
//     const buffer = Buffer.alloc(size*size);
//     fs.read(fd, buffer,4, size,19, (err) => {
//       if (err) console.log(err);
//       console.log(buffer);
//       console.log(buffer.toString());

//       fs.close(fd, (err) => {
//         if (err) console.log(err);
//         else console.log("Files Closed");
//       });
//     });
//   });
// });

// fs.open(`text.html`, "w", (err, fd) => {
//   if (err) console.error(err);
//   else {
//     let content = "Hello I am Geetansh Jain and i am intern";
//     let buffer = Buffer.from(content, "utf-8");
//     fs.write(fd, buffer, 0, content.length, 0, (err, written) => {
//       if (err) console.error(err);
//       else {
//         console.log(written, "size of bytes");

//         fs.close(fd, (err) => {
//           if (err) console.error(err);
//           else console.log(fd, "fd");
//         });
//       }
//     });
//   }
// });





// fs.open("text.html", "a+", (err, fd) => {
//   fs.stat("text.html", (err, stat) => {
//     let size = stat.size;
//     let content = "This text is appended\t";
//     let buffer = Buffer.from(content,"utf-8");

//     fs.write(fd, buffer, 0, buffer.length, size, (err, written) => {
//       if (err) console.error(err);
//       else {
//         let newBuffer = Buffer.alloc(size+buffer.length)
//         fs.read(fd, newBuffer, 0, newBuffer.length, 0, () => {
//           console.log(newBuffer.toString());
//           fs.close(fd, (err) => {
//             console.log("Files Closed");
//           });
//         });
//       }
//     });
//   });
// });



written means the number of bytes or char

