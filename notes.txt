In case of common js if ww write module.exports multiple times it will override 
that is why we use module.exports in object or like exports.varName

Single Responsibility Principle (SRP)
Open/Closed Principle
Liskov’s Substitution Principle (LSP)
Interface Segregation Principle (ISP)
Dependency Inversion Principle (DIP)




function pyramidOfDoom() {
    setTimeout(() => {
      console.log(1)
      setTimeout(() => {
        console.log(2)
        setTimeout(() => {
          console.log(3)
        }, 500)
      }, 2000)
    }, 1000)
  }   


  => callback hell





  let obj = {
//     sname:"geetansh",
//     age:22,
//     currenTime:Date()
// }

// let {sname,currenTime,age} = obj;

// console.log(sname,currenTime,age);     =>    object destructuring


let obj = {
  sname: "geetansh",
  age: 22,
  doj: new Date(Date.UTC(2025,0,1)),
  gender: "male",
};

function userInfo({ sname, age, doj, gender }) {
  console.log(`I am ${sname} and i am ${age} years old. I joined covalience on ${doj} `);
}

userInfo(obj)    =>    function destructuring



















### **Concept** | **Thread Pool** | **Cluster** | **Child Process**
--- | --- | --- | ---
**Analogy** | A team of agents working in the same call center office handling multiple calls (tasks) at the same time. | Multiple call centers each with its own agents, handling calls (tasks) independently. | Hiring an external expert (specialist) to handle a specific type of call that requires specialized knowledge.
**Purpose** | Handle multiple tasks concurrently (e.g., answering multiple customer inquiries) in the same space without blocking. | Scale your call center by splitting work across multiple offices (processes) to handle more calls at once. | Handle special tasks that are isolated from the main process, like dealing with complex customer issues.
**Memory Sharing** | Shared memory space: All agents work in the same office and share the same tools (memory). | Separate memory space: Each call center (worker process) has its own office, so they don’t share memory. | Independent memory space: The external expert works independently from the main office, without sharing resources.
**How It Works** | A team of agents works concurrently on multiple tasks in the same office, sharing the same space and tools. | Multiple call centers (worker processes) are independent and each handles its own set of calls (tasks). The main supervisor (master process) directs calls to different centers. | The external expert (child process) handles a specific task independently and communicates results back to the main office.
**When to Use** | Use when you need to perform multiple background tasks (like answering inquiries, checking info) concurrently without blocking the main call center. | Use when your call center is too busy and you need to expand by creating multiple call centers (worker processes) to handle more customer calls at once. | Use when you need to delegate a specific task (e.g., complex issues) to an external expert (child process) while the main call center handles regular tasks.
**Concurrency** | Agents work concurrently on different tasks (but within the same office space) without blocking each other. | Each call center (worker process) can handle its own calls independently, so work is done in parallel. | The task is handled independently by the child process, and it doesn’t interact with the main call center's ongoing tasks.
**Communication** | Agents in the same office communicate with each other and share resources (memory). | Call centers (worker processes) communicate with the supervisor (master process) and handle their own calls independently. | The external expert (child process) communicates results back to the main office via IPC (Inter-Process Communication) or stdout/stdin.
**Example Use Case** | Handling simple background tasks like answering customer questions or retrieving information, without blocking the main operations. | Scaling your app by creating multiple instances of the same process to handle more incoming requests (e.g., high traffic on a website). | Running a complex task (e.g., processing a large file or running an external script) that doesn’t need to be part of the main app’s workflow.
**Error Handling** | If one agent (thread) fails, it doesn’t affect others, as they all work in the same office (shared memory). | If a call center (worker process) fails, the supervisor (master process) can restart it or send calls to other centers. | If the child expert (process) fails, it does not affect the main call center; the supervisor (main process) can handle the failure or hire a new expert.

---

### **Summary of Differences:**

| **Concept**            | **What it Does**                                             | **Best for**                                            |
|------------------------|-------------------------------------------------------------|---------------------------------------------------------|
| **Thread Pool**         | Manages multiple background tasks concurrently within the same office space (shared memory). | Handling multiple small tasks (e.g., answering inquiries, doing background work) concurrently without blocking the main process. |
| **Cluster**             | Creates multiple independent call centers (worker processes) to handle customer calls (requests) separately. | Scaling your app to handle more requests by running multiple worker processes across different cores. |
| **Child Process**       | Runs an external expert (child process) independently to handle a specific task outside of the main office. | Running isolated tasks or external programs that don’t need to be part of the main app (e.g., complex processing or external scripts). |

